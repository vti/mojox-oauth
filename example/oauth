#!/usr/bin/env perl

use strict;
use warnings;

use lib 'lib';

use Mojolicious::Lite;

my $key             = 'b145c09648a6ebcf';
my $consumer_secret = '9cb9d683d61435345ef694becdc4';

my $request_token_url =
  'http://oauth-sandbox.sevengoslings.net/request_token';
my $user_authorization_url =
  'http://oauth-sandbox.sevengoslings.net/authorize';
my $access_token_url = 'http://oauth-sandbox.sevengoslings.net/access_token';

my $three_legged_url = 'http://oauth-sandbox.sevengoslings.net/three_legged';

use MojoX::Client::OAuth;

my $oauth = MojoX::Client::OAuth->new(async => 1);

my $request_tokens = {};
my $access_tokens = {};

get '/' => sub {
} => 'index';

get '/login' => sub {
    my $self = shift;

    $self->pause;

    $oauth->request_token(
        $request_token_url => {
            consumer_secret => $consumer_secret,
            params    => {
                oauth_callback     => $self->url_for('ready')->to_abs->to_string,
                oauth_consumer_key => $key
            }
          } => sub {
            my $client = shift;

            unless ($client->res->code eq 200) {
                $self->render_text($client->res->body);
                return $self->finish;
            }

            my $params;
            $params = $client->res->body_params->parse($client->res->body);

            my $token = $params->param('oauth_token');
            my $token_secret = $params->param('oauth_token_secret');
            #my $callback_confirmed = $params->param('callback_confirmed');
            #$callback_confirmed = $callback_confirmed eq 'true' ? 1 : 0;

            $request_tokens->{$token} = $token_secret;

            $self->redirect_to($user_authorization_url . "?oauth_token=$token");

            return $self->finish;
        }
    )->process;
} => 'login';

get '/ready' => sub {
    my $self = shift;

    my $token = $self->param('oauth_token');
    return $self->redirect_to('login') unless $token;

    my $token_secret = $request_tokens->{$token};
    return $self->redirect_to('login') unless $token_secret;
    my $verifier = $self->param('oauth_verifier');

    warn "token=$token";
    warn "verifier=$verifier";

    $self->pause;

    $oauth->access_token(
        $access_token_url => {
            consumer_secret => $consumer_secret,
            token_secret => $token_secret,
            params    => {
                oauth_consumer_key => $key,
                oauth_token => $token,
                oauth_verifier => $verifier
            }
        } => sub {
            my $client = shift;

            warn $client->res->code;
            warn $client->res->headers->location . '';
            warn $client->res->body;

            my $params;
            $params = $client->res->body_params->parse($client->res->body);

            my $token = $params->param('oauth_token');
            my $token_secret = $params->param('oauth_token_secret');

            $self->session(token => $token);

            $access_tokens->{$token} = $token_secret;

            #$self->render_text($client->res->body);

            $self->redirect_to('resource');

            $self->finish;
        }
    )->process;
} => 'ready';

get '/resource' => sub {
    my $self = shift;

    my $token = $self->session('token');
    return $self->redirect_to('login') unless $token;

    my $token_secret = $access_tokens->{$token};
    return $self->redirect_to('login') unless $token_secret;

    $self->pause;

    $oauth->request_token(
        $three_legged_url => {
            consumer_secret => $consumer_secret,
            token_secret    => $token_secret,
            params          => {
                oauth_consumer_key => $key,
                oauth_token        => $token
            }
          } => sub {
            my $client = shift;

            warn $client->res->code;

            if ($client->res->code ne 200) {
                $self->redirect_to('login');
                return $self->finish;
            }

            warn $client->res->body;

            $self->render_text($client->res->body);

            return $self->finish;
        }
      )->process;
} => 'resource';

app->start;

__DATA__

@@ index.html.ep

<%= link_to 'login' => {%>Login<%}%>

@@ ready.html.ep
